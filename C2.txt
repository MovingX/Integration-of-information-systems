@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

' Определение участников
Person(клиент, "Клиент", "Пользователь, который использует мобильное приложение или веб-приложение для записи на мойку и управления заказами.")
Person(администратор, "Администратор / Тех. поддержка", "Человек, управляющий процессами на автомойке и решающий вопросы с клиентами.")

' Контейнеры
Container(мобильноеПриложение, "Мобильное приложение", "Swift/Kotlin/Java", "Приложение для клиентов, использующих мобильные устройства для записи на мойку, выбора услуг и оплаты.")
Container(вебПриложение, "Веб-приложение", "React/Node.js", "Веб-интерфейс для клиентов и администраторов для записи, управления процессом мойки и оплаты.")
Container(loadBalancer, "Балансировщик нагрузки", "Nginx", "Управляет распределением трафика между серверными компонентами и повышает доступность системы.")
Container(api, "API", "Python/Flask", "Серверный API, который обрабатывает запросы от мобильного и веб-приложений, а также взаимодействует с базой данных и внешними сервисами.")
Container(системаПушУведомлений, "Система пуш-уведомлений", "Софтовая система", "Отправляет пуш-уведомления клиентам и администраторам о статусе заказов, скидках и акциях.")
Container(системаОплаты, "Система оплаты", "Софтовая система", "Обрабатывает платежи за услуги мойки, взаимодействует с внешними платёжными системами.")
Container(базаДанных, "База данных", "MySQL", "Хранит информацию о пользователях, заказах, услугах, оплатах и других данных, необходимых для работы системы.")

' Взаимодействия между контейнерами
Rel(клиент, мобильноеПриложение, "Использует для записи на мойку, выбора услуг и оплаты через HTTP/REST")
Rel(клиент, вебПриложение, "Использует для записи на мойку, выбора услуг и оплаты через HTTP/REST")
Rel(мобильноеПриложение, loadBalancer, "Отправляет запросы через HTTP/REST к балансировщику нагрузки")
Rel(вебПриложение, loadBalancer, "Отправляет запросы через HTTP/REST к балансировщику нагрузки")
Rel(loadBalancer, api, "Распределяет запросы через HTTP/REST между API и контейнерами")
Rel(api, базаДанных, "Читает/записывает данные пользователей, заказов, услуг и оплат через HTTP/REST")
Rel(api, системаПушУведомлений, "Отправляет уведомления клиентам и персоналу через HTTP/REST")
Rel(api, системаОплаты, "Отправляет запросы на обработку платежей через HTTP/REST")
Rel(системаПушУведомлений, мобильноеПриложение, "Отправляет уведомления пользователю о статусе заказа через HTTP/REST")
Rel(системаПушУведомлений, вебПриложение, "Отправляет уведомления пользователю о статусе заказа через HTTP/REST")
Rel(системаОплаты, api, "Обрабатывает и передает данные о статусе платежа через HTTP/REST")
Rel(администратор, вебПриложение, "Управляет процессами автомойки и решает вопросы с клиентами через HTTP/REST")
Rel(администратор, системаПушУведомлений, "Получает уведомления о текущем статусе заказов и других процессах через HTTP/REST")
Rel(администратор, системаОплаты, "Проверяет данные о платежах и заказах через HTTP/REST")
@enduml


@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

' Определение участников
Person(пользователь, "Пользователь автомойки", "Клиент, записывающийся на автомойку через приложение.")
Person(техподдержка, "Тех. поддержка", "Сотрудник, помогающий клиентам и управляющий системой.")

' Основная система
System_Boundary(Система, "Интернет сервис Автомойки [Программное обеспечение]") {
  Container(мобильноеПриложение, "Мобильное приложение", "Kotlin + Android Studio / Swift", "Организует запросы к API, позволяет записываться на мойку, выбирать услуги, управлять заказами и оплатить услуги.")
  Container(loadBalancer, "Load Balancer", "Nginx", "Распределяет запросы между серверными компонентами.")
  Container(apiСервис, "API сервис автомойки", "Python + Flask/Django", "Обрабатывает запросы и организует функционал системы.")
  Container(базаДанных, "База данных автомойки", "MySQL", "Хранит информацию о пользователях, записях, услугах и оплатах.")
}

' Система уведомлений и оплата как отдельные компоненты
System_Ext(системаПушУведомлений, "Система уведомлений", "Сервис", "Отправляет уведомления клиентам и администраторам (SMS, Push и т.д.)")
System_Ext(платежнаяСистема, "Платежная система", "Программное обеспечение", "Организует оплату через банк пользователя.")

' Связи между элементами
Rel(пользователь, мобильноеПриложение, "Запись в автомойку, выбор услуг, управление заказами")
Rel(мобильноеПриложение, loadBalancer, "Отправляет запросы через HTTP/REST")
Rel(loadBalancer, apiСервис, "Распределяет запросы на сервер")
Rel(apiСервис, базаДанных, "Чтение и запись данных")
Rel(apiСервис, системаПушУведомлений, "Передает данные для отправки уведомлений")
Rel(apiСервис, платежнаяСистема, "Запрос на оплату")
Rel(платежнаяСистема, пользователь, "Запрос на оплату через банк пользователя")
Rel(системаПушУведомлений, мобильноеПриложение, "Отправляет уведомления клиентам и администраторам")
Rel(техподдержка, мобильноеПриложение, "Общение с пользователем")
@enduml